# This project simulates an e-commerce store database, allowing for the management and analysis of customer orders, products, reviews, and sales by providing queries to track 
# customer behavior, product performance, and overall business metrics. 

-- Create Customers table
CREATE TABLE Customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    phone VARCHAR(15),
    join_date DATE NOT NULL,
    address VARCHAR(255)
);

-- Create Products table
CREATE TABLE Products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(255) NOT NULL,
    category VARCHAR(100),
    price DECIMAL(10, 2) NOT NULL,
    stock_quantity INT NOT NULL DEFAULT 0,
    description TEXT
);

-- Create Orders table
CREATE TABLE Orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    shipping_address VARCHAR(255),
    order_status VARCHAR(50) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Create Order_Items table
CREATE TABLE Order_Items (
    order_item_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    price_at_time DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- Create Reviews table
CREATE TABLE Reviews (
    review_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    customer_id INT NOT NULL,
    review_date DATE NOT NULL,
    rating INT CHECK (rating >= 1 AND rating <= 5),  -- rating between 1 and 5
    review_text TEXT,
    FOREIGN KEY (product_id) REFERENCES Products(product_id),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Create Categories table (optional but useful for organizing products)
CREATE TABLE Categories (
    category_id INT AUTO_INCREMENT PRIMARY KEY,
    category_name VARCHAR(100) NOT NULL UNIQUE
);

-- Alter Products table to include category_id as a foreign key (instead of category name)
ALTER TABLE Products
ADD COLUMN category_id INT,
ADD FOREIGN KEY (category_id) REFERENCES Categories(category_id);

-- Insert sample categories
INSERT INTO Categories (category_name) VALUES
('Electronics'),
('Clothing'),
('Home & Kitchen'),
('Books'),
('Toys & Games'),
('Beauty & Personal Care'),
('Sports & Outdoors'),
('Automotive'),
('Health & Wellness'),
('Grocery');

-- Insert sample products
INSERT INTO Products (product_name, category_id, price, stock_quantity, description) VALUES
('Laptop', 1, 899.99, 50, 'High-performance laptop with 16GB RAM and 512GB SSD.'),
('Smartphone', 1, 499.99, 100, 'Android smartphone with 6.5-inch display and 128GB storage.'),
('T-shirt', 2, 19.99, 200, 'Cotton t-shirt available in various sizes.'),
('Coffee Maker', 3, 69.99, 75, 'Automatic coffee maker with a 12-cup capacity.'),
('Children\'s Toy Set', 5, 29.99, 150, 'Toy building blocks for kids age 3 and above.'),
('Fiction Novel', 4, 14.99, 300, 'A best-selling fiction novel from a popular author.'),  -- <-- Missing comma
('Electric Toothbrush', 4, 49.99, 120, 'Electric toothbrush with multiple modes and long battery life.'),
('Tennis Racket', 6, 89.99, 40, 'Lightweight tennis racket with ergonomic grip.'),
('Car Tire', 7, 99.99, 150, 'Durable all-season tire for medium-sized vehicles.'),
('Yoga Mat', 5, 24.99, 300, 'Non-slip yoga mat with comfortable padding.'),
('Organic Shampoo', 3, 19.99, 80, 'Organic shampoo with natural ingredients for dry hair.'),
('Instant Coffee', 8, 7.99, 200, 'Instant coffee powder with rich taste and aroma.');

-- Insert sample customers
INSERT INTO Customers (first_name, last_name, email, phone, join_date, address) VALUES
('John', 'Doe', 'john.doe@example.com', '555-1234', '2023-01-15', '123 Elm St, Springfield, IL'),
('Jane', 'Smith', 'jane.smith@example.com', '555-5678', '2022-06-22', '456 Oak St, Madison, WI'),
('Alice', 'Johnson', 'alice.johnson@example.com', '555-8765', '2023-03-10', '789 Pine St, Chicago, IL'),  -- <-- Missing comma
('Emma', 'Williams', 'emma.williams@example.com', '555-2233', '2024-02-15', '321 Maple St, Atlanta, GA'),
('Oliver', 'Brown', 'oliver.brown@example.com', '555-4455', '2023-11-05', '654 Birch St, Seattle, WA'),
('Sophia', 'Davis', 'sophia.davis@example.com', '555-9988', '2023-07-10', '987 Cedar St, Denver, CO'),
('Liam', 'Martinez', 'liam.martinez@example.com', '555-6677', '2024-01-22', '567 Pine St, San Francisco, CA');

-- Insert sample orders
INSERT INTO Orders (customer_id, order_date, total_amount, shipping_address, order_status) VALUES
(1, '2023-01-16', 1299.98, '123 Elm St, Springfield, IL', 'Shipped'),
(2, '2022-06-23', 39.98, '456 Oak St, Madison, WI', 'Delivered'),
(3, '2023-03-12', 119.98, '789 Pine St, Chicago, IL', 'Pending'),
(4, '2024-01-23', 179.98, '567 Pine St, San Francisco, CA', 'Shipped'),
(3, '2023-07-12', 139.97, '987 Cedar St, Denver, CO', 'Delivered'),
(2, '2023-11-07', 129.98, '654 Birch St, Seattle, WA', 'Pending'),
(1, '2024-02-16', 94.97, '321 Maple St, Atlanta, GA', 'Shipped');

-- Insert sample order items
INSERT INTO Order_Items (order_id, product_id, quantity, price_at_time) VALUES
(1, 1, 1, 899.99), -- Customer 1 bought 1 Laptop
(1, 2, 1, 499.99), -- Customer 1 bought 1 Smartphone
(2, 3, 2, 19.99), -- Customer 2 bought 2 T-shirts
(3, 4, 1, 69.99), -- Customer 3 bought 1 Coffee Maker
(4, 5, 1, 49.99),  -- Liam bought 1 Organic Shampoo
(4, 6, 1, 89.99),  -- Liam bought 1 Tennis Racket
(3, 4, 1, 24.99),  -- Sophia bought 1 Yoga Mat
(3, 7, 1, 99.99),  -- Sophia bought 1 Car Tire
(2, 2, 2, 19.99),  -- Oliver bought 2 T-shirts
(1, 3, 3, 7.99);   -- Emma bought 3 Instant Coffees

-- Insert sample reviews
INSERT INTO Reviews (product_id, customer_id, review_date, rating, review_text) VALUES
(1, 1, '2023-01-20', 5, 'Amazing laptop! Very fast and great for work and gaming.'),
(2, 2, '2022-06-24', 4, 'Good phone, but the battery life could be better.'),
(4, 3, '2023-03-13', 5, 'Works perfectly! Makes great coffee every time.'),
(5, 1, '2023-01-22', 4, 'Great toy for kids, but a few pieces were missing.'),
(6, 2, '2022-06-25', 3, 'Interesting story, but a bit slow-paced.'),  -- <-- Missing comma
(5, 4, '2024-01-25', 5, 'Great shampoo! My hair feels much smoother after using it for a week.'),
(6, 3, '2023-07-15', 4, 'Nice coffee, but a bit too strong for my taste.'),
(4, 2, '2023-11-08', 5, 'The yoga mat is amazing! Very comfortable and non-slip.'),
(7, 1, '2024-02-17', 4, 'Tire seems durable and fits my car well. The ride is smoother now.'),
(2, 2, '2023-11-09', 4, 'Good racket, but the grip could be improved. Overall, it\'s a great buy.'),
(1, 1, '2024-02-18', 5, 'I absolutely love this electric toothbrush! My teeth feel so clean.');


-- 1. Find the total number of orders for a customer.
SELECT COUNT(order_id) as total_order, customer_id
FROM Orders
GROUP BY customer_id;

-- 2. Get the most popular product based on the number of times it was ordered.
SELECT COUNT(oi.product_id) as total_order, p.product_name
FROM Products p LEFT JOIN Order_Items oi
ON p.product_id = oi.product_id
GROUP BY p.product_id
ORDER BY total_order DESC
LIMIT 1;

-- 3. List all products with their average ratings.
SELECT AVG(r.rating) as avg_rating, p.product_name 
FROM Reviews r LEFT JOIN Products p
ON r.product_id = p.product_id
GROUP BY p.product_id;

-- 4. Get the total sales by product category.
SELECT c.category_name, SUM(oi.price_at_time * oi.quantity) as total_sales
FROM Order_Items oi INNER JOIN Products p 
ON oi.product_id = p.product_id 
INNER JOIN Categories c 
ON c.category_id = p.category_id
GROUP BY c.category_name;

-- 5. Find the top 5 customers by total spending.
SELECT c.customer_id 
FROM Customers c LEFT JOIN Orders o 
ON c.customer_id = o.customer_id
ORDER BY o.total_amount ASC
LIMIT 5;

-- 6. Get products that have never been reviewed.
SELECT p.product_name 
FROM Products p LEFT JOIN Reviews r 
ON p.product_id = r.product_id 
WHERE r.rating IS NULL;
