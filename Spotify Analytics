# For this project, I download Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL.

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

--Number of Artits
SELECT COUNT(DISTINCT artist_name)
FROM BIGT_DB.Spotifydata;

--Number of songs
SELECT COUNT(DISTINCT track_name)
FROM BIGT_DB.Spotifydata;

--What is the average danceability by artist and track? 
SELECT artist_name, track_name, AVG(danceability) as avg_dance
FROM BIGT_DB.Spotifydata
GROUP BY artist_name, track_name
ORDER BY avg_dance DESC;

--Who are the top 10 artists based on popularity? 
SELECT track_name, artist_name, popularity
FROM BIGT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10;

--What artist released the longest song? 
SELECT artist_name 
FROM BIGT_DB.Spotifydata
WHERE duration_ms IN (SELECT MAX(duration_ms) FROM BIGT_DB.Spotifydata);

--What's the average danceability for the 10 most popular songs?
SELECT AVG(danceability)
FROM BIGT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10;

-- How many tracks have a liveness score greater than 0.8?
SELECT COUNT(track_name)
FROM BIGT_DB.Spotifydata
WHERE liveness > 0.8;

--Which artist have the highest number of track?
SELECT artist_name, COUNT(track_name) as total_track
FROM BIGT_DB.Spotifydata
GROUP BY artist_name
ORDER BY total_track DESC
LIMIT 1;

--What is the average danceability, enegy, and valence of tracks grouped by their popularity level (e.g., high, meidum, low)?
SELECT ROUND(AVG(danceability), 2) as avg_dance, 
ROUND(AVG(energy), 2) as avg_energy, 
ROUND(AVG(valence), 2) as avg_valence,
CASE 
    WHEN popularity >= 90 THEN 'High'
    WHEN popularity >= 80 THEN 'Medium'
    ELSE 'Low'
END as popularity_level
FROM BIGT_DB.Spotifydata
GROUP BY popularity_level;

--Which track has the highest energy, and what is its popularity?
SELECT artist_name, track_name, energy, popularity
FROM BIGT_DB.Spotifydata
WHERE energy = (SELECT MAX(energy) 
                FROM BIGT_DB.Spotifydata);
                
--What is the most common musical key in the dataset?
SELECT COUNT(DISTINCT song_key) as musical_key
FROM BIGT_DB.Spotifydata
GROUP BY song_key
ORDER BY musical_key DESC
LIMIT 1;

-- How many tracks have a tempo above 120 BPM and a valence score above 07 (uplifting tracks)
SELECT COUNT(track_name)
FROM BIGT_DB.Spotifydata
WHERE tempo > 120 AND valence > 0.7;      
